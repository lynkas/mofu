// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mofu/ent/history"
	"mofu/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryUpdate is the builder for updating History entities.
type HistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HistoryMutation
}

// Where appends a list predicates to the HistoryUpdate builder.
func (hu *HistoryUpdate) Where(ps ...predicate.History) *HistoryUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetCreatorID sets the "creator_id" field.
func (hu *HistoryUpdate) SetCreatorID(s string) *HistoryUpdate {
	hu.mutation.SetCreatorID(s)
	return hu
}

// SetCreateAt sets the "create_at" field.
func (hu *HistoryUpdate) SetCreateAt(t time.Time) *HistoryUpdate {
	hu.mutation.SetCreateAt(t)
	return hu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableCreateAt(t *time.Time) *HistoryUpdate {
	if t != nil {
		hu.SetCreateAt(*t)
	}
	return hu
}

// SetLastUpdate sets the "last_update" field.
func (hu *HistoryUpdate) SetLastUpdate(t time.Time) *HistoryUpdate {
	hu.mutation.SetLastUpdate(t)
	return hu
}

// SetContentFlag sets the "content_flag" field.
func (hu *HistoryUpdate) SetContentFlag(i int) *HistoryUpdate {
	hu.mutation.ResetContentFlag()
	hu.mutation.SetContentFlag(i)
	return hu
}

// SetNillableContentFlag sets the "content_flag" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableContentFlag(i *int) *HistoryUpdate {
	if i != nil {
		hu.SetContentFlag(*i)
	}
	return hu
}

// AddContentFlag adds i to the "content_flag" field.
func (hu *HistoryUpdate) AddContentFlag(i int) *HistoryUpdate {
	hu.mutation.AddContentFlag(i)
	return hu
}

// ClearContentFlag clears the value of the "content_flag" field.
func (hu *HistoryUpdate) ClearContentFlag() *HistoryUpdate {
	hu.mutation.ClearContentFlag()
	return hu
}

// SetSentFlag sets the "sent_flag" field.
func (hu *HistoryUpdate) SetSentFlag(i int) *HistoryUpdate {
	hu.mutation.ResetSentFlag()
	hu.mutation.SetSentFlag(i)
	return hu
}

// SetNillableSentFlag sets the "sent_flag" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableSentFlag(i *int) *HistoryUpdate {
	if i != nil {
		hu.SetSentFlag(*i)
	}
	return hu
}

// AddSentFlag adds i to the "sent_flag" field.
func (hu *HistoryUpdate) AddSentFlag(i int) *HistoryUpdate {
	hu.mutation.AddSentFlag(i)
	return hu
}

// ClearSentFlag clears the value of the "sent_flag" field.
func (hu *HistoryUpdate) ClearSentFlag() *HistoryUpdate {
	hu.mutation.ClearSentFlag()
	return hu
}

// SetMentionedCount sets the "mentioned_count" field.
func (hu *HistoryUpdate) SetMentionedCount(i int) *HistoryUpdate {
	hu.mutation.ResetMentionedCount()
	hu.mutation.SetMentionedCount(i)
	return hu
}

// SetNillableMentionedCount sets the "mentioned_count" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableMentionedCount(i *int) *HistoryUpdate {
	if i != nil {
		hu.SetMentionedCount(*i)
	}
	return hu
}

// AddMentionedCount adds i to the "mentioned_count" field.
func (hu *HistoryUpdate) AddMentionedCount(i int) *HistoryUpdate {
	hu.mutation.AddMentionedCount(i)
	return hu
}

// SetTakeEffectTime sets the "take_effect_time" field.
func (hu *HistoryUpdate) SetTakeEffectTime(t time.Time) *HistoryUpdate {
	hu.mutation.SetTakeEffectTime(t)
	return hu
}

// SetNillableTakeEffectTime sets the "take_effect_time" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableTakeEffectTime(t *time.Time) *HistoryUpdate {
	if t != nil {
		hu.SetTakeEffectTime(*t)
	}
	return hu
}

// ClearTakeEffectTime clears the value of the "take_effect_time" field.
func (hu *HistoryUpdate) ClearTakeEffectTime() *HistoryUpdate {
	hu.mutation.ClearTakeEffectTime()
	return hu
}

// SetSendingContent sets the "sending_content" field.
func (hu *HistoryUpdate) SetSendingContent(b []byte) *HistoryUpdate {
	hu.mutation.SetSendingContent(b)
	return hu
}

// ClearSendingContent clears the value of the "sending_content" field.
func (hu *HistoryUpdate) ClearSendingContent() *HistoryUpdate {
	hu.mutation.ClearSendingContent()
	return hu
}

// Mutation returns the HistoryMutation object of the builder.
func (hu *HistoryUpdate) Mutation() *HistoryMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hu.defaults()
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HistoryUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HistoryUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HistoryUpdate) defaults() {
	if _, ok := hu.mutation.LastUpdate(); !ok {
		v := history.UpdateDefaultLastUpdate()
		hu.mutation.SetLastUpdate(v)
	}
}

func (hu *HistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   history.Table,
			Columns: history.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: history.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.CreatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: history.FieldCreatorID,
		})
	}
	if value, ok := hu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: history.FieldCreateAt,
		})
	}
	if value, ok := hu.mutation.LastUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: history.FieldLastUpdate,
		})
	}
	if value, ok := hu.mutation.ContentFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldContentFlag,
		})
	}
	if value, ok := hu.mutation.AddedContentFlag(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldContentFlag,
		})
	}
	if hu.mutation.ContentFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: history.FieldContentFlag,
		})
	}
	if value, ok := hu.mutation.SentFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldSentFlag,
		})
	}
	if value, ok := hu.mutation.AddedSentFlag(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldSentFlag,
		})
	}
	if hu.mutation.SentFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: history.FieldSentFlag,
		})
	}
	if value, ok := hu.mutation.MentionedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldMentionedCount,
		})
	}
	if value, ok := hu.mutation.AddedMentionedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldMentionedCount,
		})
	}
	if value, ok := hu.mutation.TakeEffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: history.FieldTakeEffectTime,
		})
	}
	if hu.mutation.TakeEffectTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: history.FieldTakeEffectTime,
		})
	}
	if value, ok := hu.mutation.SendingContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: history.FieldSendingContent,
		})
	}
	if hu.mutation.SendingContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: history.FieldSendingContent,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HistoryUpdateOne is the builder for updating a single History entity.
type HistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HistoryMutation
}

// SetCreatorID sets the "creator_id" field.
func (huo *HistoryUpdateOne) SetCreatorID(s string) *HistoryUpdateOne {
	huo.mutation.SetCreatorID(s)
	return huo
}

// SetCreateAt sets the "create_at" field.
func (huo *HistoryUpdateOne) SetCreateAt(t time.Time) *HistoryUpdateOne {
	huo.mutation.SetCreateAt(t)
	return huo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableCreateAt(t *time.Time) *HistoryUpdateOne {
	if t != nil {
		huo.SetCreateAt(*t)
	}
	return huo
}

// SetLastUpdate sets the "last_update" field.
func (huo *HistoryUpdateOne) SetLastUpdate(t time.Time) *HistoryUpdateOne {
	huo.mutation.SetLastUpdate(t)
	return huo
}

// SetContentFlag sets the "content_flag" field.
func (huo *HistoryUpdateOne) SetContentFlag(i int) *HistoryUpdateOne {
	huo.mutation.ResetContentFlag()
	huo.mutation.SetContentFlag(i)
	return huo
}

// SetNillableContentFlag sets the "content_flag" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableContentFlag(i *int) *HistoryUpdateOne {
	if i != nil {
		huo.SetContentFlag(*i)
	}
	return huo
}

// AddContentFlag adds i to the "content_flag" field.
func (huo *HistoryUpdateOne) AddContentFlag(i int) *HistoryUpdateOne {
	huo.mutation.AddContentFlag(i)
	return huo
}

// ClearContentFlag clears the value of the "content_flag" field.
func (huo *HistoryUpdateOne) ClearContentFlag() *HistoryUpdateOne {
	huo.mutation.ClearContentFlag()
	return huo
}

// SetSentFlag sets the "sent_flag" field.
func (huo *HistoryUpdateOne) SetSentFlag(i int) *HistoryUpdateOne {
	huo.mutation.ResetSentFlag()
	huo.mutation.SetSentFlag(i)
	return huo
}

// SetNillableSentFlag sets the "sent_flag" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableSentFlag(i *int) *HistoryUpdateOne {
	if i != nil {
		huo.SetSentFlag(*i)
	}
	return huo
}

// AddSentFlag adds i to the "sent_flag" field.
func (huo *HistoryUpdateOne) AddSentFlag(i int) *HistoryUpdateOne {
	huo.mutation.AddSentFlag(i)
	return huo
}

// ClearSentFlag clears the value of the "sent_flag" field.
func (huo *HistoryUpdateOne) ClearSentFlag() *HistoryUpdateOne {
	huo.mutation.ClearSentFlag()
	return huo
}

// SetMentionedCount sets the "mentioned_count" field.
func (huo *HistoryUpdateOne) SetMentionedCount(i int) *HistoryUpdateOne {
	huo.mutation.ResetMentionedCount()
	huo.mutation.SetMentionedCount(i)
	return huo
}

// SetNillableMentionedCount sets the "mentioned_count" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableMentionedCount(i *int) *HistoryUpdateOne {
	if i != nil {
		huo.SetMentionedCount(*i)
	}
	return huo
}

// AddMentionedCount adds i to the "mentioned_count" field.
func (huo *HistoryUpdateOne) AddMentionedCount(i int) *HistoryUpdateOne {
	huo.mutation.AddMentionedCount(i)
	return huo
}

// SetTakeEffectTime sets the "take_effect_time" field.
func (huo *HistoryUpdateOne) SetTakeEffectTime(t time.Time) *HistoryUpdateOne {
	huo.mutation.SetTakeEffectTime(t)
	return huo
}

// SetNillableTakeEffectTime sets the "take_effect_time" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableTakeEffectTime(t *time.Time) *HistoryUpdateOne {
	if t != nil {
		huo.SetTakeEffectTime(*t)
	}
	return huo
}

// ClearTakeEffectTime clears the value of the "take_effect_time" field.
func (huo *HistoryUpdateOne) ClearTakeEffectTime() *HistoryUpdateOne {
	huo.mutation.ClearTakeEffectTime()
	return huo
}

// SetSendingContent sets the "sending_content" field.
func (huo *HistoryUpdateOne) SetSendingContent(b []byte) *HistoryUpdateOne {
	huo.mutation.SetSendingContent(b)
	return huo
}

// ClearSendingContent clears the value of the "sending_content" field.
func (huo *HistoryUpdateOne) ClearSendingContent() *HistoryUpdateOne {
	huo.mutation.ClearSendingContent()
	return huo
}

// Mutation returns the HistoryMutation object of the builder.
func (huo *HistoryUpdateOne) Mutation() *HistoryMutation {
	return huo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HistoryUpdateOne) Select(field string, fields ...string) *HistoryUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated History entity.
func (huo *HistoryUpdateOne) Save(ctx context.Context) (*History, error) {
	var (
		err  error
		node *History
	)
	huo.defaults()
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, huo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*History)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HistoryUpdateOne) SaveX(ctx context.Context) *History {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HistoryUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HistoryUpdateOne) defaults() {
	if _, ok := huo.mutation.LastUpdate(); !ok {
		v := history.UpdateDefaultLastUpdate()
		huo.mutation.SetLastUpdate(v)
	}
}

func (huo *HistoryUpdateOne) sqlSave(ctx context.Context) (_node *History, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   history.Table,
			Columns: history.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: history.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "History.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history.FieldID)
		for _, f := range fields {
			if !history.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != history.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.CreatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: history.FieldCreatorID,
		})
	}
	if value, ok := huo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: history.FieldCreateAt,
		})
	}
	if value, ok := huo.mutation.LastUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: history.FieldLastUpdate,
		})
	}
	if value, ok := huo.mutation.ContentFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldContentFlag,
		})
	}
	if value, ok := huo.mutation.AddedContentFlag(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldContentFlag,
		})
	}
	if huo.mutation.ContentFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: history.FieldContentFlag,
		})
	}
	if value, ok := huo.mutation.SentFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldSentFlag,
		})
	}
	if value, ok := huo.mutation.AddedSentFlag(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldSentFlag,
		})
	}
	if huo.mutation.SentFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: history.FieldSentFlag,
		})
	}
	if value, ok := huo.mutation.MentionedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldMentionedCount,
		})
	}
	if value, ok := huo.mutation.AddedMentionedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: history.FieldMentionedCount,
		})
	}
	if value, ok := huo.mutation.TakeEffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: history.FieldTakeEffectTime,
		})
	}
	if huo.mutation.TakeEffectTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: history.FieldTakeEffectTime,
		})
	}
	if value, ok := huo.mutation.SendingContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: history.FieldSendingContent,
		})
	}
	if huo.mutation.SendingContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: history.FieldSendingContent,
		})
	}
	_node = &History{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
